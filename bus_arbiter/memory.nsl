#include "../memory.nh"

module memory
{
    reg addr[32];
    proc_name requested(addr);
    reg counter[10] = 0;

    reg write_addr[32];
    reg write_value[32];
    proc_name write(write_addr, write_value);

    mem dummy_mem[0x80][8];

    reg i[32];
    func_self dump();

    func dump seq
    {
        for(i := 0,32)
        {
            _display("0x%08x: 0x%x", i, dummy_mem[i]);
        }
    }

    func init seq
    {
        _readmemh("test.mem", dummy_mem);
        //dump();
    }

    func request
    {
        // simulation for general memory bus
        requested(address);

        // simulation for bootrom, cache, etc. highest memory.
        //return_value(dummy_mem[address >> 2]);
    }

    proc requested
    {
        if(counter == 10'0x2)
        {
            counter := 0;
            data_enable(
                    {
                        dummy_mem[addr + 3],
                        dummy_mem[addr + 2],
                        dummy_mem[addr + 1],
                        dummy_mem[addr + 0]
                    });
            finish();
        }
        else {
            counter++;
        }
    }

    func write_request
    {
        write(d_address, d_value);
    }

    proc write
    {
        dummy_mem[d_address] := d_value;
        write_done();
    }
}
