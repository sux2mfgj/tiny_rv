#include "bus_arbiter.nh"

#define REQUEST_TYPE_EMPTY          (3'b000)
#define REQUEST_TYPE_INSTRUCTION    (3'b001)
#define REQUEST_TYPE_LOAD_B         (3'b010)
#define REQUEST_TYPE_LOAD_H         (3'b011)
#define REQUEST_TYPE_LOAD_W         (3'b100)
#define REQUEST_TYPE_STORE_B        (3'b101)
#define REQUEST_TYPE_STORE_H        (3'b110)
#define REQUEST_TYPE_STORE_W        (3'b111)

struct request_content
{
    address[32];
    type[3];
};

module bus_arbiter
{
    request_content reg brom_req_content;
    proc_name brom_request(brom_req_content);
    request_content reg brom_req_wait = 35'h0;
    request_content wire brom_req_inst, brom_req_data;

    proc_name brom_write();

    func i_request
    {
        if (i_address < 32'h400)
        {
            brom_req_inst.address = i_address;
            brom_req_inst.type = REQUEST_TYPE_INSTRUCTION;
            if(!brom_request)
            {
                brom_request(brom_req_inst);
                boot_mem_read_request(i_address);
            }
            else
            {
                brom_req_wait := brom_req_inst;
            }
        }
        else
        {
            error();
        }
    }

    func load_w
    {
        if(d_address < 32'h400)
        {
            brom_req_data.address = d_address;
            brom_req_data.type = REQUEST_TYPE_LOAD_W;
            if(!(brom_request|i_request))
            {
                brom_request(brom_req_data);
                boot_mem_read_request(d_address);
            }
            else
            {
                brom_req_wait := brom_req_data;
            }
        }
    }

    proc brom_request
    {
        func boot_mem_data_enable
        {
            any
            {
                brom_req_content.type == REQUEST_TYPE_INSTRUCTION:
                {
                    i_enable(bootmem_data);
                    if (brom_req_wait.type == REQUEST_TYPE_EMPTY)
                    {
                        finish();
                    }
                    else
                    {
                        boot_mem_read_request(brom_req_wait.address);
                        brom_request(brom_req_wait);
                        if (!(load_w | i_request))
                        {
                            brom_req_wait.type := REQUEST_TYPE_EMPTY;
                        }
                    }
                }
                brom_req_content.type == REQUEST_TYPE_LOAD_W:
                {
                    d_enable(bootmem_data);
                    if(brom_req_wait.type == REQUEST_TYPE_EMPTY)
                    {
                        finish();
                    }
                    else
                    {
                        boot_mem_read_request(brom_req_wait.address);
                        brom_request(brom_req_wait);
                        if (!(load_w | i_request))
                        {
                            brom_req_wait.type := REQUEST_TYPE_EMPTY;
                        }

                    }
                }
                else:
                {
                    error();
                }
            }
        }
    }

    func store_w
    {
        boot_mem_write_request(d_address, d_write_value);
        brom_write(d_address);
    }

    proc brom_write
    {
        //counter を作って、byte, harf, wordを行けるようにしたい
        if(boot_mem_write_done)
        {
            store_done();
        }
    }
}
