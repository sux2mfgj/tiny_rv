#include "dummy_memory.nh"
#include "hex.nh"

// memory_size = 0x2400
// log2(memory_size)
#define ACCESS_BIT_SIZE 13

declare bootrom
{
    input address[32];
    input in_data[8];
    output out_data[32];
    func_in load(address) : out_data;
    func_in store(address, in_data);
}

module dummy_memory
{
    //mem memory[0x2400][8];
    bootrom rom;

    reg value[8];
    reg access_base[32];
    proc_name read_proc(access_base);
    proc_name write_proc(value);

    /*
    _init {
        _readmemh(MEMORY_HEX, memory);
    }
    */

    //func_in request_read(address);
    func request_read
    {
        read_proc(address - 0x80000000);
        if(address < 0x80000000)
        {
            error(ERROR_DUMMY_MEM_ADDRESS);
        }
    }
    proc read_proc
    {
        read_done(rom.load(access_base));
        /*
        read_done({
                memory[access_base[ACCESS_BIT_SIZE:0]+ 3],
                memory[access_base[ACCESS_BIT_SIZE:0]+ 2],
                memory[access_base[ACCESS_BIT_SIZE:0]+ 1],
                memory[access_base[ACCESS_BIT_SIZE:0]+ 0]});
                */
        finish();
    }

    //func_in request_write(address, write_data);
    func request_write
    {
        write_proc(write_data);
        any
        {
            // for riscv-test
            address == 0x80001000:
            {
                if(write_data == 1)
                {
                    error(ERROR_OK);
                }
                else
                {
                    error(write_data[ERROR_NUM_BIT_WIDTH - 1:0]);
                }
            }
            // peripheral
            address >= 0x4000_0000 || address <= 0x4000_1000:
            {
                //nothing
            }
            /*
            address < 0x80000000:
            {
                error(ERROR_DUMMY_MEM_ADDRESS);
            }
            */
        }
        access_base := address - 0x80000000;
    }

    proc write_proc seq
    {
        //error(ERROR_NOT_IMPLEMENTED);
        rom.store(access_base, value[7:0]);
        //memory[access_base[ACCESS_BIT_SIZE:0]] := value[7:0];
        {
            write_done();
            finish();
        }
    }
}
