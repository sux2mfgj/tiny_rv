#include "control_status_registers.nh"

module control_status_registers
{
    reg mhartid[32] = 0;
    reg mtvec[32] = 0;
    reg mstatus[32] = 0;
    reg mepc[32] = 0;
    reg mcause[32] = 0;

    wire update_funct[2], update_value[32],
         update_source[32], update_result[32];
    func_self update(update_funct, update_value, update_source): update_result;

    func get_mtvec
    {
        return mtvec;
    }

    func update_mcause
    {
        mcause := mcause_value;
    }

    func update
    {
        any
        {
            update_funct == SYSTEM_FUNCT_CSR_RS:
            {
                return update_value | update_source;
            }
            update_funct == SYSTEM_FUNCT_CSR_RW:
            {
                return update_source;
            }
            else:
            {
                error(ERROR_CSR_UNKNWON_FUNCT);
            }
        }
    }

    func read_update
    {
        any
        {
            address == CSR_MHARTID:
            {
                mhartid := update(funct, mhartid, source);
                return mhartid;
            }
            address == CSR_MTVEC:
            {
                mtvec := update(funct, mtvec, source);
                return mtvec;
            }
            address == CSR_MSTATUS:
            {
                mstatus := update(funct, mstatus, source);
                return mstatus;
            }
            address == CSR_MEPC:
            {
                mepc := update(funct, mepc, source);
                return mepc;
            }
            address == CSR_MCAUSE:
            {
                mcause := update(funct, mcause, source);
                return mcause;
            }
            //pmpaddr
            address >= 12'h3a0 && address <= 12'h3bf:
            {
                trap(mtvec);
                return 0;
            }
            //delegation
            address == 12'h302 || address == 12'h180 || address == 12'h303:
            {
                trap(mtvec);
                return 0;
            }
            else:
            {
                error(ERROR_NOT_IMPLEMENTED);
            }
        }
    }
}
