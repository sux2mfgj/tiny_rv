#include "integer_arithmetic_logic.nh"
#include "funct3.nh"

declare integer_arithmetic_logic_tb simulation
{
    output error_num[ERROR_NUM_BIT_WIDTH];
    func_out error(error_num);
}

module integer_arithmetic_logic_tb
{
    integer_arithmetic_logic ialu;

    reg counter[10] = 10'h0;
    counter++;

    if(counter == 10'h4)
    {
        // 0xff + 0x02  (0x101)
        _display("calculate 0x%x",
                ialu.calculate(32'hff, 32'h02, 3'b000, 1'b0));

        // 0x01 == 0x01 (1)
        _display("compare 0b%x",
                ialu.compare(32'h01, 32'h01, 3'b000));
    }

    if(counter == 10'h5)
    {
        // 0xff + 0x02  (0x101)
        _display("calculate 0x%x",
                ialu.calculate(32'hff, 32'h02, 3'b000, 1'b1));

    }

    if(counter == 10'h6)
    {
        if(1'b0 == ialu.compare(32'h00, 32'h01, FUNCT3_COMP_BLT))
        {
            error(ERROR_NUM_BIT_WIDTH'b1);
            _display("[ failed ] 0 < 1 (blt)");
        }
        else
        {
            _display("[ passed ] 0 < 1 (blt)");
        }
    }

    if(counter == 10'h7)
    {
        if(1'b1 == ialu.compare(32'h02, 32'h01, FUNCT3_COMP_BLT))
        {
            error(ERROR_NUM_BIT_WIDTH'b1);
            _display("[ failed ] 2 < 1 (blt)");
        }
        else
        {
            _display("[ passed ] 2 < 1 (blt)");
        }
    }

    if(counter == 10'h8)
    {
        if(1'b0 == ialu.compare(32'h0f, 32'h0f, FUNCT3_COMP_BEQ))
        {
            error(ERROR_NUM_BIT_WIDTH'b1);
            _display("[ failed ] 0xf == 0xf (beq)");
        }
        else
        {
            _display("[ passed ] 0xf == 0xf (beq)");
        }
    }

    if(counter == 10'h9)
    {
        if(1'b1 == ialu.compare(32'h0e, 32'h0f, FUNCT3_COMP_BEQ))
        {
            error(ERROR_NUM_BIT_WIDTH'b1);
            _display("[ failed ] 0xe == 0xf (beq)");
        }
        else
        {
            _display("[ passed ] 0xe == 0xf (beq)");
        }
    }

    if(counter == 10'h10)
    {
        _finish();
    }
}
