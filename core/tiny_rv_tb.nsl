#include "tiny_rv.nh"

declare tiny_rv_tb simulation
{
    output error_num[ERROR_NUM_BIT_WIDTH];
    func_out error(error_num);
}

module tiny_rv_tb
{
    tiny_rv rv_core;
    reg counter[10] = 0;

    wire e_num[ERROR_NUM_BIT_WIDTH];
    func_self finish_simulation(e_num);

    reg i_address[32];
    proc_name return_inst(i_address);

    counter++;

    if(counter == 10'h02)
    {
        rv_core.start(32'h00000000);
    }

    if(counter == 10'h10)
    {
        finish_simulation(ERROR_OK);
    }

    /*
     * memory
     */
    func rv_core.inst_request
    {
        return_inst(rv_core.i_address);
    }

    proc return_inst
    {
        _display("requested: ", i_address);
        //01028293  addi    t0,t0,16 # 80000064 <reset_vector+0x18>

        rv_core.inst_done(32'h01028293);
        finish();
    }

    func rv_core.error
    {
        finish_simulation(rv_core.error_num);
        error(rv_core.error_num);
    }

    func finish_simulation
    {
        _finish("finish: ", e_num);
    }
}
