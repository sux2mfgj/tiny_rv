#include "integer_arithmetic_logic.nh"
#include "funct3.nh"

module integer_arithmetic_logic
{
    wire tmp_result;
    wire shift_amount[32];

    wire local_comp_a[32], local_comp_b[32]
        ,local_comp_funct[3], local_comp_result;
    func_self local_compare(local_comp_a, local_comp_b, local_comp_funct)
        : local_comp_result;

    wire sc_in_a[32], sc_in_b[32], sc_result, sc_tmp[32];
    func_self signed_compare(sc_in_a, sc_in_b) : sc_result;

    func signed_compare
    {
        sc_tmp = sc_in_a - sc_in_b;
        any
        {
            // + < -
            !sc_in_a[31] && sc_in_b[31]:
            {
                return 1'b0;
            }
            // - < +
            sc_in_a[31] && !sc_in_b[31]:
            {
                return 1'b1;
            }
            else:
            {
                return sc_tmp[31];
            }
        }
    }

    func calculate
    {
        shift_amount = 32'in_b[4:0];
        any
        {
            funct == FUNCT3_ADD_SUB:
            {
                if(!is_alt)
                {
                    return in_a + in_b;
                }
                else
                {
                    return in_a - in_b;
                }
            }
            funct == FUNCT3_SHIFT_LEFT:
            {
                return in_a << shift_amount;
            }
            funct == FUNCT3_SHIFT_RIGHT:
            {
                if(is_alt)
                {
                    return (32#in_a[31] << (32'd32 - shift_amount)) |
                                (in_a >> shift_amount);
                }
                else
                {
                    return in_a >> shift_amount;
                }
            }
            funct == FUNCT3_AND:
            {
                return in_a & in_b;
            }
            funct == FUNCT3_OR:
            {
                return in_a | in_b;
            }
            funct == FUNCT3_XOR:
            {
                return in_a ^ in_b;
            }
            funct == FUNCT3_SLT:
            {
                tmp_result = local_compare(in_a, in_b, FUNCT3_COMP_BLT);
                return 32'tmp_result;
            }
            else:
            {
                error(ERROR_ALU_UNKNWON_FUNCT);
            }
            //TODO another processing
        }
    }

    func local_compare
    {
        any
        {
            local_comp_funct == FUNCT3_COMP_BEQ
                || local_comp_funct == FUNCT3_COMP_BNE:
            {
                return local_comp_a == local_comp_b;
            }
            local_comp_funct == FUNCT3_COMP_BLT
                || local_comp_funct == FUNCT3_COMP_BGE:
            {
                return signed_compare(local_comp_a, local_comp_b);
            }
            else:
            {
                error(ERROR_ALU_UNKNWON_FUNCT);
            }
        }
    }

    func compare
    {
        return comp_funct[0] ^ local_compare(comp_a, comp_b, comp_funct);
    }
}
