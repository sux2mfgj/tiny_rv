#include "integer_arithmetic_logic.nh"
#include "funct3.nh"

module integer_arithmetic_logic
{
    wire cmp_result;
    wire tmp_result[32];
    wire shift_amount[32];

    wire local_comp_a[32], local_comp_b[32]
        ,local_comp_funct[3], local_comp_result;
    func_self local_compare(local_comp_a, local_comp_b, local_comp_funct)
        : local_comp_result;

    func calculate
    {
        shift_amount = 32'in_b[4:0];
        any
        {
            funct == FUNCT3_ADD_SUB:
            {
                if(!is_alt)
                {
                    return in_a + in_b;
                }
                else
                {
                    return in_a - in_b;
                }
            }
            funct == FUNCT3_SHIFT_LEFT:
            {
                return in_a << shift_amount;
            }
            funct == FUNCT3_SHIFT_RIGHT:
            {
                if(is_alt)
                {
                    return (32#in_a[31] << (32'd32 - shift_amount)) |
                                (in_a >> shift_amount);
                }
                else
                {
                    return in_a >> shift_amount;
                }
            }
            funct == FUNCT3_AND:
            {
                return in_a & in_b;
            }
            funct == FUNCT3_OR:
            {
                return in_a | in_b;
            }
            funct == FUNCT3_XOR:
            {
                return in_a ^ in_b;
            }
            /*
            funct == FUNCT3_SLT:
            {

            }
            */
            else:
            {
                error(ERROR_ALU_UNKNWON_FUNCT);
            }
            //TODO another processing
        }
    }

    func local_compare
    {
        any
        {
            local_comp_funct == FUNCT3_COMP_BEQ
                || local_comp_funct == FUNCT3_COMP_BNE:
            {
                return local_comp_a == local_comp_b;
            }
            local_comp_funct == FUNCT3_COMP_BLT
                || local_comp_funct == FUNCT3_COMP_BGE:
            {
                tmp_result = local_comp_a - local_comp_b;
                return tmp_result[31];
            }
            else:
            {
                error(ERROR_ALU_UNKNWON_FUNCT);
            }
        }
    }

    func compare
    {
        return comp_funct[0] ^ local_compare(comp_a, comp_b, comp_funct);
    }
}
