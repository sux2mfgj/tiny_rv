#include "integer_register.nh"

module integer_register
{
    mem registers[31][32] = {32'h0};
    integer i;
#ifdef DEBUG
    reg debug_counter[8];
#endif

    func read_rs1
    {
        if(read_address_1 == 5'h0)
        {
            return 32'h0;
        }
        generate(i = 1; i<=31; i++)
        {
            if(read_address_1 == i)
            {
                return registers[i - 1];
            }
        }
    }

    func read_rs2
    {
        if(read_address_2 == 5'h0)
        {
            return 32'h0;
        }

        generate(i = 1; i<=31; i++)
        {
            if(read_address_2 == i)
            {
                return registers[i - 1];
            }
        }
    }

    func write
    {
        if(write_address == 5'h0)
        {
            error();
        }
        else {
            registers[write_address - 1] := write_data;
        }
    }

#ifdef DEBUG
    func dump seq
    {
        _display("register");
        debug_counter := 0;
        _display("%d: 0x00000000", debug_counter);
        for(debug_counter := 1, 31)
        {
            _display("%d: 0x%08x", debug_counter, registers[debug_counter - 1]);
        }
        dump_done();
    }
#endif
}
