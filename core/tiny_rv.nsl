#include "tiny_rv.nh"
#include "fetch.nh"
#include "format.nh"
#include "integer_register.nh"

module tiny_rv
{
    fetch ifetch;
    integer_register int_regs;

    reg exec_inst[32];
    reg request_addr[32];
    proc_name fetch_request_stage(request_addr);
    proc_name fetch_wait_stage();
    proc_name execute_stage(exec_inst);

    wire exec_op_code[7];
    op_imm_t wire op_imm;
    //op_t wire op;

    wire sourece_1[32];
    wire sourece_2[32];
    wire result[32];
    //wire comp_result;

    wire rs1[5], rs1_value[32];
    wire rs2[5], rs2_value[32];
    func_self read_register_1(rs1) : rs1_value;
    func_self read_register_2(rs2) : rs2_value;


    //func_in start(instruction);
    func start
    {
        fetch_request_stage(instruction);
    }
    /*
     * instruction fetch
     */
    func ifetch.request_to_bus
    {
        inst_request(ifetch.address);
    }

    func inst_done
    {
        ifetch.enable(instruction);
    }

    /*
     * read register
     */
    func read_register_1
    {
        //TODO
        return int_regs.read_rs1(rs1);
    }

    func read_register_2
    {
        //TODO
        return int_regs.read_rs2(rs2);
    }

	proc fetch_request_stage
	{
        ifetch.request(request_addr);
        fetch_wait_stage();
    }

    proc fetch_wait_stage
    {
        if(ifetch.done)
        {
            execute_stage(ifetch.instruction);
        }
    }

    proc execute_stage
    {
        exec_op_code = exec_inst[6:0];
        any
        {
            exec_op_code == OP_IMM:
            {
                op_imm = exec_inst;
                sourece_1 = 32#op_imm.imm;
                sourece_2 = read_register_1(op_imm.rs1);
                //TODO
            }
            else:
            {
                error(ERROR_EXEC_ERROR_OPCODE);
            }
        }
    }

    /*
     * errors
     */
    func ifetch.error
    {
        error(ifetch.error_num);
    }
}
