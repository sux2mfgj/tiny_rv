#include "debug.nh"
#include "core/tiny_rv.nh"
#include "bus_arbiter/bus_arbiter.nh"
#include "memory.nh"

declare system_tb simulation {}

module system_tb
{
    tiny_rv core;
    bus_arbiter arbiter;
    memory dummy_mem;

    reg counter[10] = 10'h0;
    counter++;

    _init {
        dummy_mem.init();
    }

    func core.error
    {
        _display("error occured in core");
#ifdef DEBUG
        core.register_dump();
#else
        _finish();
#endif
    }

    if(counter == 10'h10)
    {
        core.start(32'h10);
    }

    if(counter == 10'h40)
    {
#ifdef DEBUG
        core.register_dump();
#else
        _finish();
#endif
    }

#ifdef DEBUG
    func core.register_dump_done
    {
        dummy_mem.dump();
    }
    func dummy_mem.dump_done
    {
        _finish();
    }
#endif

    // connections for instruction
    func core.request
    {
        arbiter.i_request(core.i_address);
    }

    func arbiter.boot_mem_read_request
    {
        dummy_mem.request(arbiter.bootmem_read_address);
    }

    func dummy_mem.data_enable
    {
        arbiter.boot_mem_data_enable(dummy_mem.data);
    }

    func arbiter.i_enable
    {
        core.enable(arbiter.instruction);
    }

    // for load
    func core.load_w
    {
        arbiter.load_w(core.d_address);
    }

    func arbiter.d_enable
    {
        core.load_done(arbiter.d_value);
    }

    // for store
    func core.store_b
    {
        arbiter.store_b(core.d_address, core.store_data);
    }

    func arbiter.boot_mem_write_request
    {
        dummy_mem.write_request(
                arbiter.bootmem_write_address,
                arbiter.bootmem_write_data);
    }

    func dummy_mem.write_done
    {
        arbiter.boot_mem_write_done();
    }

    func arbiter.store_done
    {
        core.store_done();
    }
}
